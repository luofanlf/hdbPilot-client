name: Android CI/CD

on:
  push:
    branches: [ main, develop, 'Feature/*' ]  # 添加 Feature/* 模式
  pull_request:
    branches: [ main, develop, 'Feature/*' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'

    # 优化：分层缓存策略
    - name: 缓存 Gradle 依赖
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-deps-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-deps-

    - name: 缓存 Gradle 构建输出
      uses: actions/cache@v4
      with:
        path: |
          .gradle
          build
          app/build
        key: ${{ runner.os }}-gradle-build-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ hashFiles('**/src/**') }}
        restore-keys: |
          ${{ runner.os }}-gradle-build-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-

    # 使用CI专用配置
    - name: 运行单元测试
      run: ./gradlew test --no-daemon --parallel --max-workers=2 -Dorg.gradle.jvmargs="-Xmx4096m" --stacktrace
      env:
        GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m"

    - name: 上传测试报告
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: app/build/test-results/

  build-android:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'

    # 优化：分层缓存策略
    - name: 缓存 Gradle 依赖
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-deps-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-deps-

    - name: 缓存 Gradle 构建输出
      uses: actions/cache@v4
      with:
        path: |
          .gradle
          build
          app/build
        key: ${{ runner.os }}-gradle-build-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ hashFiles('**/src/**') }}
        restore-keys: |
          ${{ runner.os }}-gradle-build-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-

    # 如果是 main 分支，先恢复 keystore
    - name: 恢复 keystore
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > release.keystore

    # 使用CI专用配置构建
    - name: 构建 Debug APK
      if: github.ref != 'refs/heads/main'  # 所有非main分支都构建debug APK
      run: ./gradlew assembleDebug --no-daemon --parallel --max-workers=2 -Dorg.gradle.jvmargs="-Xmx4096m" --stacktrace
      env:
        GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m"

    - name: 构建 Release APK（未签名）
      if: github.ref == 'refs/heads/main'
      run: ./gradlew assembleRelease --no-daemon --parallel --max-workers=2 -Dorg.gradle.jvmargs="-Xmx4096m" --stacktrace
      env:
        GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m"

    - name: 使用 apksigner 签名 Release APK
      if: github.ref == 'refs/heads/main'
      run: |
        APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -n 1)
        echo "找到 APK: $APK_PATH"
        $ANDROID_HOME/build-tools/34.0.0/apksigner sign \
          --ks release.keystore \
          --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
          --ks-pass pass:"${{ secrets.KEYSTORE_PASSWORD }}" \
          --key-pass pass:"${{ secrets.KEY_PASSWORD }}" \
          "$APK_PATH"
        echo "签名完成: $APK_PATH"

    - name: 检查APK文件
      run: |
        echo "=== 检查APK文件 ==="
        echo "Debug APK:"
        if [ -d "app/build/outputs/apk/debug" ]; then
          ls -la app/build/outputs/apk/debug/
        else
          echo "Debug目录不存在"
        fi
        echo ""
        echo "Release APK:"
        if [ -d "app/build/outputs/apk/release" ]; then
          ls -la app/build/outputs/apk/release/
        else
          echo "Release目录不存在"
        fi
        echo ""
        echo "所有APK文件:"
        find app/build/outputs/apk -name "*.apk" -type f

    - name: 上传 APK 到 Artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: |
          app/build/outputs/apk/debug/*.apk
          app/build/outputs/apk/release/*.apk
        if-no-files-found: error

  